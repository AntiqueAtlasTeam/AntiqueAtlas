plugins {
	id "com.github.johnrengelman.shadow" version "7.1.2"
	id "me.shedaniel.unified-publishing"
}

architectury {
	platformSetupLoomIde()
	fabric()
}

loom {
	accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}


dependencies {
	modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
	modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
	modApi "me.shedaniel:architectury-fabric:${rootProject.architectury_version}"

	modImplementation "io.github.prospector:modmenu:${rootProject.mod_menu_version}"
	modApi("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
	inputs.property "version", project.version
}

shadowJar {
	exclude "architectury.common.json"

	configurations = [project.configurations.shadowCommon]
	classifier "dev-shadow"
}

jar {
	classifier "dev"
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	classifier null
}

sourcesJar {
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	exclude "antiqueatlas.accesswidener"
}

publishing {
	publications {
		mavenFabric(MavenPublication) {
			artifactId = rootProject.archives_base_name + "-" + project.name
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				classifier null
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
	}
}

unifiedPublishing {
	project {
		gameVersions = ["1.16.2", "1.16.3", "1.16.4", "1.16.5"]
		gameLoaders = ["fabric"]
		releaseType = "release"

		mainPublication tasks.remapJar

		relations {
			depends {
				curseforge = "cloth-config"
				modrinth = "cloth-config"
			}
			depends {
				curseforge = "fabric-api"
				modrinth = "fabric-api"
			}
			depends {
				curseforge = "architectury-api"
				modrinth = "architectury-api"
			}
		}

		var cfToken = System.getenv("CF_TOKEN")
		if (cfToken != null) {
			curseforge {
				token = cfToken
				id = rootProject.curseforge_id
				gameVersions.addAll "Java 17"
				gameVersions.addAll "Java 8"
			}
		}

		var mrToken = System.getenv("MODRINTH_TOKEN")
		if (mrToken != null) {
			modrinth {
				token = mrToken
				id = rootProject.modrinth_id
			}
		}
	}
}
