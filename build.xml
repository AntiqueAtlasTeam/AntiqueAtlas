<?xml version="1.0"?>
<project name="AntiqueAtlas" default="build-release">

	<property file="local.properties" />
	<property file="build.properties"/>

	<property name="mcp.src" value="${dir.mcp}/src/minecraft" />
	<property name="mcp.reobf" value="${dir.mcp}/reobf/minecraft" />

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="lib/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<path id="jgit">
		<pathelement location="lib/org.eclipse.jgit_2.2.0.201212191850-r.jar"/>
	</path>
	<target name="get version from git">
		<script language="javascript" classpathref="jgit">
			<![CDATA[
			importClass(java.io.File);
			importClass(java.util.Arrays);
			importClass(Packages.org.eclipse.jgit.api.Git);
			importClass(Packages.org.eclipse.jgit.revwalk.RevWalk);
			importClass(Packages.org.eclipse.jgit.revwalk.RevWalkUtils);
			
			var git = Git.open(new File("."));
			
			// We need to find the last tag that is reachable from the branch "master"
			var master = git.getRepository().getRef("master");
			var masterList = Arrays.asList(master);
			
			var rw = new RevWalk(git.getRepository());
			var tagList = git.tagList().call();
			var tag = null;
			var tagIter = tagList.listIterator(tagList.size());
			while (tagIter.hasPrevious()) {
			    tag = tagIter.previous();
			    if (!tag.isPeeled()) {
			        // Need to "peel" the tag to access underlying commit:
			        tag = git.getRepository().peel(tag);
			    }
			    var commit = rw.parseCommit(tag.getPeeledObjectId());
			    var reachableBranches = RevWalkUtils.findBranchesReachableFrom(commit, rw, masterList);
			    if (reachableBranches.contains(master)) {
			        break;
			    }
			}
			var tagCommitId = tag.getPeeledObjectId();
			
			var commitIter = git.log().call().iterator();
			var commitsSince = 0;
			while (commitIter.hasNext()) {
			    var commit = commitIter.next();
				if (commit.getId().equals(tagCommitId)) {
			        break;
			    }
			    commitsSince++;
			}

			var version = tag.getName();
			if (version.indexOf("refs/tags/") == 0) {
			    version = version.substring("refs/tags/".length);
			}
			if (version.indexOf("v") == 0) {
                version = version.substring("v".length);
            }
			project.setProperty("mod.version", version + "." + commitsSince);
			]]>
		</script>
		<echo message="Mod version is ${mod.version}" />
	</target>

	<target name="copy_src">
		<copy todir="${mcp.src}">
			<fileset dir="src" excludes="assets/**,mcmod.info,*.png"/>
		</copy>
	</target>
	<target name="cleanup">
		<delete>
			<!-- delete copied sources -->
			<fileset dir="${mcp.src}">
				<present present="both" targetdir="src" />
			</fileset>
			<!-- delete empty directories -->
			<dirset dir="${mcp.src}">
				<present present="both" targetdir="src" />
				<size value="0"/>
			</dirset>
		</delete>
	</target>

	<target name="replace tokens in src">
		<fileset dir="${mcp.src}" id="copied_mod_src">
			<present present="both" targetdir="src" />
		</fileset>
		<replace token="@@MOD_ID@@" value="${mod.id}">
			<fileset refid="copied_mod_src" />
		</replace>
		<replace token="@@MOD_NAME@@" value="${mod.name}">
			<fileset refid="copied_mod_src" />
		</replace>
		<replace token="@@MOD_VERSION@@" value="${mod.version}">
			<fileset refid="copied_mod_src" />
		</replace>
		<replace token="@@MC_VERSION@@" value="${minecraft.version}">
			<fileset refid="copied_mod_src" />
		</replace>
	</target>
	<target name="copy and replace tokens in mcmod.info">
		<copy file="src/mcmod.info" todir="${mcp.reobf}" />
		<replace token="@@MOD_ID@@" value="${mod.id}" file="${mcp.reobf}/mcmod.info" />
		<replace token="@@MOD_NAME@@" value="${mod.name}" file="${mcp.reobf}/mcmod.info" />
		<replace token="@@MOD_VERSION@@" value="${mod.version}" file="${mcp.reobf}/mcmod.info" />
		<replace token="@@MC_VERSION@@" value="${minecraft.version}" file="${mcp.reobf}/mcmod.info" />
	</target>

	<target name="recompile">
		<exec dir="${dir.mcp}" executable="cmd" osfamily="windows">
			<arg line="/c recompile.bat" />
		</exec>
		<exec dir="${dir.mcp}" executable="bash" osfamily="unix">
			<arg line="recompile.sh" />
		</exec>
	</target>
	<target name="reobfuscate">
		<exec dir="${dir.mcp}" executable="cmd" osfamily="windows">
			<arg line="/c reobfuscate_srg.bat" />
		</exec>
		<exec dir="${dir.mcp}" executable="bash" osfamily="unix">
			<arg line="reobfuscate_srg.sh" />
		</exec>
	</target>

	<target name="package">
		<mkdir dir="${dir.release}" />
		<zip destfile="${dir.release}/${mod.id}-${mod.version}-mc${minecraft.version}.zip">
			<fileset dir="${mcp.reobf}" />
			<fileset dir="src" includes="assets/**,*.png" />
		</zip>
	</target>

	<target name="build-release">
		<antcallback target="get version from git" return="mod.version" />
		<antcallback target="copy_src" />
		<antcallback target="replace tokens in src" />
		<antcallback target="recompile" />
		<antcallback target="reobfuscate" />
		<antcallback target="copy and replace tokens in mcmod.info" />
		<antcallback target="package" />
		<antcallback target="cleanup" />
	</target>
</project>
