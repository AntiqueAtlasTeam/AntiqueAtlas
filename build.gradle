buildscript {
	repositories {
		maven { url = 'https://files.minecraftforge.net/maven' }
		jcenter()
		mavenCentral()
		maven {
			name = 'sponge'
			url = 'https://repo.spongepowered.org/maven'
		}
	}
	dependencies {
		classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
		classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
	}
}

plugins {
	id 'java-library'
	id 'maven-publish'
}

apply plugin: "net.minecraftforge.gradle"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group


repositories {
	maven { url 'http://server.bbkr.space:8081/artifactory/libs-release' }
}

// Allow 5000 errors.
gradle.projectsEvaluated {
	tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xmaxerrs" << "5000"
		options.compilerArgs << "-Xmaxwarns" << "5000"
	}
}

dependencies {
	// Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
	// that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
	// The userdev artifact is a special name and will get all sorts of transformations applied to it.
	minecraft 'net.minecraftforge:forge:1.15.2-31.2.0'

	compile 'org.spongepowered:mixin:0.8'

	compile 'com.google.code.findbugs:jsr305:3.0.2'
	testCompile "junit:junit:4.+"
}
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}
repositories {
	maven { url 'https://repo1.maven.org/maven2' }
}

//sourceSets {
//	main {
//		compileClasspath += sourceSets.api.output
//		runtimeClasspath += sourceSets.api.output
//	}
//	test {
//		compileClasspath += sourceSets.api.output
//		runtimeClasspath += sourceSets.api.output
//	}
//}

//configurations {
//	apiCompile.extendsFrom(compile)
//}

dependencies {
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

minecraft {
	mappings channel: "snapshot", version: project.mcp_mappings

	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			property 'forge.logging.console.level', 'debug'
			workingDirectory project.file('run')
			arg '-mixin.config=antiqueatlas.mixins.json'
			mods {
				antiqueatlas {
					source sourceSets.main
					//source sourceSets.api
				}
			}
		}
		server {
			property 'forge.logging.console.level', 'debug'
			workingDirectory project.file('run')
			arg '-mixin.config=antiqueatlas.mixins.json'
			mods {
				antiqueatlas {
					source sourceSets.main
					//source sourceSets.api
				}
			}
		}
		data {
			property 'forge.logging.console.level', 'debug'
			workingDirectory project.file('run')
			args '--mod', 'antiqueatlas', '--all', '--output', file('src/generated/resources/')
			mods {
				antiqueatlas {
					source sourceSets.main
					//source sourceSets.api
				}
			}
		}
	}
}

jar {
	manifest {
		attributes([
				"Specification-Title": "antiqueatlas",
				//"Specification-Vendor": "examplemodsareus",
				"Specification-Version": "1", // We are version 1 of ourselves
				"Implementation-Title": project.name,
				"Implementation-Version": "${version}",
				//"Implementation-Vendor" :"examplemodsareus",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"MixinConfigs": "antiqueatlas.mixins.json"
		])
	}
}


processResources {
	inputs.property "version", project.version
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

jar {
	from "LICENSE"
}

apply plugin: 'org.spongepowered.mixin'

mixin {
	add sourceSets.main, "antiqueatlas.refmap.json"
}